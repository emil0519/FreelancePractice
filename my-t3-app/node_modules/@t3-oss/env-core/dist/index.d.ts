import z, { ZodType, ZodError, ZodObject } from 'zod';

type ErrorMessage<T extends string> = T;
type Simplify<T> = {
    [P in keyof T]: T[P];
} & {};
interface BaseOptions<TPrefix extends string, TServer extends Record<string, ZodType>, TClient extends Record<string, ZodType>> {
    clientPrefix: TPrefix;
    server: TServer;
    client: {
        [TKey in keyof TClient]: TKey extends `${TPrefix}${string}` ? TClient[TKey] : ErrorMessage<`${TKey extends string ? TKey : never} is not prefixed with ${TPrefix}.`>;
    };
    isServer?: boolean;
    onValidationError?: (error: ZodError) => never;
    onInvalidAccess?: (variable: string) => never;
    skipValidation?: boolean;
}
interface LooseOptions<TPrefix extends string, TServer extends Record<string, ZodType>, TClient extends Record<string, ZodType>> extends BaseOptions<TPrefix, TServer, TClient> {
    runtimeEnvStrict?: never;
    runtimeEnv: Record<string, string | boolean | number | undefined>;
}
interface StrictOptions<TPrefix extends string, TServer extends Record<string, ZodType>, TClient extends Record<string, ZodType>> extends BaseOptions<TPrefix, TServer, TClient> {
    runtimeEnvStrict: Record<{
        [TKey in keyof TClient]: TKey extends `${TPrefix}${string}` ? TKey : never;
    }[keyof TClient] | keyof TServer, string | boolean | number | undefined>;
    runtimeEnv?: never;
}
declare function createEnv<TPrefix extends string, TServer extends Record<string, ZodType> = NonNullable<unknown>, TClient extends Record<string, ZodType> = NonNullable<unknown>>(opts: LooseOptions<TPrefix, TServer, TClient> | StrictOptions<TPrefix, TServer, TClient>): Simplify<z.infer<ZodObject<TServer>> & z.infer<ZodObject<TClient>>>;

export { BaseOptions, ErrorMessage, LooseOptions, Simplify, StrictOptions, createEnv };
